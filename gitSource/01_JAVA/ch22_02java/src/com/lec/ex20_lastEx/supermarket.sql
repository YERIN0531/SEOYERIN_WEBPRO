--SEQUENCE , LEVEL, CUSTOMER 테이블 만들기 

DROP TABLE CUSTOMER;
DROP TABLE CUS_LEVEL;
DROP SEQUENCE CUS_SEQ;
-- DROP TABLE CUSTOMER CASCADE CONSTRAINTS; 참조 한 테이블이 생각안날때, 참조 상관없이 테이블 밀어버리는 것.. 절대 안씀 

-- CUS_LEVEL TABLE 만들기
CREATE TABLE CUS_LEVEL(
    LNO         NUMBER(1,0) PRIMARY KEY,
    LNAME       VARCHAR2(30) NOT NULL,
    LOW         NUMBER(9,0),
    HIGH        NUMBER(9,0)
);
SELECT * FROM CUS_LEVEL;

-- CUS_SEQ SEQUENCE 만들기
CREATE SEQUENCE CUS_SEQ
    MAXVALUE 999999
    NOCYCLE
    NOCACHE;

-- CUSTOMER TABLE 만들기 
CREATE TABLE CUSTOMER(
    CID        NUMBER(6,0) PRIMARY KEY,
    CTEL       VARCHAR2(20) ,
    CNAME      VARCHAR2(30) ,
    POINT      NUMBER(9,0) DEFAULT 1000,
    AMOUNT     NUMBER(9,0) DEFAULT 0,
    LNO        NUMBER(1,0) DEFAULT 1,
    FOREIGN KEY (LNO) REFERENCES CUS_LEVEL(LNO)
);
SELECT * FROM CUSTOMER;

-- 더미데이터 입력[바로 쿼리 만들면 실행되는지 확인하기 어렵기 때문에 INSERT 해줘서 실행 보는 것]
-- CUS_LEVEL INSERT
INSERT INTO CUS_LEVEL VALUES (1,'NORMAL',0,999999);
INSERT INTO CUS_LEVEL VALUES (2,'SILVER',1000000,1999999);
INSERT INTO CUS_LEVEL VALUES (3,'GOLD',2000000,2999999);
INSERT INTO CUS_LEVEL VALUES (4,'VIP',3000000,3999999);
INSERT INTO CUS_LEVEL VALUES (5,'VVIP',4000000,999999999);
SELECT * FROM CUS_LEVEL;

-- CUSTOMER INSERT
INSERT INTO CUSTOMER (CID,CTEL,CNAME)
VALUES (CUS_SEQ.NEXTVAL,'010-1111-1111','홍길동');
INSERT INTO CUSTOMER 
VALUES (CUS_SEQ.NEXTVAL,'010-2222-2222','홍길동',0,4000000,5);
INSERT INTO CUSTOMER 
VALUES (CUS_SEQ.NEXTVAL,'010-3333-3333','신길동',0,100000,1);
--INSERT INTO CUSTOMER 
--VALUES (CUS_SEQ.NEXTVAL,'010-4444-4444','송혜교',10000,400002,4);
--INSERT INTO CUSTOMER 
--VALUES (CUS_SEQ.NEXTVAL,'010-5555-5555','배수지',200000,1000002,5);
SELECT * FROM CUSTOMER;
SELECT * FROM CUS_LEVEL;

-- 0. 콤보박스에 고객등급리스트 넣어놓기 
-- public Vector<String> getLevelNames()
SELECT LNAME FROM CUS_LEVEL;

-- 1. 아이디 검색 (ID,CTEL,CNAME,POINT,LNAME)
-- public CustomerDto cidGetCustomer(int cid); -- 아이디는 겹칠일이 없으니까 
-- CID,CTEL,CNAME,POINT,AMOUNT,LNAME,FORLEVELUP
SELECT HIGH+1-AMOUNT FROM CUSTOMER C, CUS_LEVEL L WHERE C.LNO=L.LNO;

SELECT  CID, CTEL, CNAME, POINT, AMOUNT, LNAME,
(SELECT HIGH+1-AMOUNT FROM CUSTOMER WHERE CID=C.CID AND LNO!=5) forLevelUp
FROM CUS_LEVEL L, CUSTOMER C 
WHERE C.LNO=L.LNO AND CID=1;
SELECT * FROM CUS_LEVEL;
COMMIT;
-- 2. 폰4자리 검색 : 폰 뒤 4자리로 검색 가능하고, FULL로 입력해도 검색가능 
-- public ArrayList<CustomerDto> ctelGetCustomer(String ctel)
-- CID,CTEL,CNAME,POINT,AMOUNT,LNAME,FORLEVELUP
SELECT CID, CTEL, CNAME, POINT,AMOUNT, LNAME,
(SELECT HIGH-AMOUNT+1 FROM CUSTOMER WHERE CID=C.CID AND LNO!=5)forlevelUp
FROM CUSTOMER C, CUS_LEVEL L
WHERE C.LNO=L.LNO AND CTEL LIKE '%'||'010-1111-1111';
COMMIT;
SELECT * FROM CUSTOMER;

-- 3. 고객이름 검색 
-- CID,CTEL,CNAME,POINT,AMOUNT,LNAME,FORLEVELUP
-- public ArrayList<CustomerDto> cnameGetCustomer(String cname)
SELECT CID, CTEL, CNAME, POINT, AMOUNT, LNAME,
(SELECT HIGH-AMOUNT+1 FROM CUSTOMER WHERE CID=C.CID AND LNO!=5)forlevelup
FROM CUSTOMER C, CUS_LEVEL L
WHERE C.LNO=L.LNO AND CNAME = '홍길동' ORDER BY AMOUNT DESC;

COMMIT;
-- 4. 구매금액이 포인트보다 작을때 포인트 사용(100원짜리를 포인트로만 구매) ------- 다시 생각해보기 
-- CID, POINT, 구매금액 3개 필요 (1번 id가 100원 구매) 
-- pulbic int buyWithPoint(int cid, int amount)
UPDATE CUSTOMER 
    SET POINT = (POINT - 100)
    WHERE CID=1;
SELECT * FROM CUSTOMER;


-- 5. 물품구매 (고객전화,이름,구매금액 입력시 물품구매 가능) 
-- (1000000원짜리를 구매할 경우 . 포인트는 구매금액의 5%)
-- 물품구매시 UPDATE 2회필요 (구매누적금액 UPDATE와 LEVELNO UPDATE)
--public int buy (int cid, int amount)
-- 물품구매 update에는 cpoint,camount,levelno가 수정 
--5-1 POINT,AMOUNT 변경 
UPDATE CUSTOMER SET POINT = POINT +(1000000*0.5),
                    AMOUNT = AMOUNT +1000000
                    WHERE CID=1;
                    
    SELECT * FROM CUSTOMER;
    
--5-2 UPDATE LEVELNO UPDATE 레벨수정 //수정될레벨이 나오는 이유는 위에서 홍길동이 물건을 샀기 때문  
SELECT CID, CNAME , AMOUNT, C.LNO 현레벨 , L.LNO 수정될레벨 FROM CUSTOMER C , CUS_LEVEL L
WHERE AMOUNT BETWEEN LOW AND HIGH; 

--5-3 levelno를 수정 
UPDATE CUSTOMER SET LNO = (SELECT L.LNO FROM CUSTOMER C, CUS_LEVEL L WHERE AMOUNT BETWEEN LOW AND HIGH AND CID=1)
WHERE CID=1;
SELECT * FROM CUSTOMER;

-- 5-1과 5-3을 한꺼번에 POINT,AMOUNT,LNO를 한꺼번에 수정 
UPDATE CUSTOMER SET POINT = POINT +(1000000*0.5),
                    AMOUNT = AMOUNT +1000000,
                    LNO = (SELECT L.LNO 
                    FROM CUSTOMER C, CUS_LEVEL L 
                    WHERE AMOUNT+1000000 BETWEEN LOW AND HIGH AND CID=1)
    WHERE CID=1;
    
    SELECT * FROM CUSTOMER;

-- 6. 등급별 출력 
-- public ArrayList<CustomerDto> lnameGetCustomer(STRING lname)
-- CID,CTEL,CNAME,POINT,AMOUNT,LNAME,FORLEVELUP
SELECT CID, CTEL, CNAME, POINT, AMOUNT , LNAME,
(SELECT HIGH-AMOUNT+1 FROM CUSTOMER WHERE CID=C.CID AND LNO!=5)forlevelup
FROM CUSTOMER C, CUS_LEVEL L
WHERE C.LNO=L.LNO AND LNAME = 'GOLD';

COMMIT;
-- 7. 전체출력
-- public ArrayList<CustomerDto> getCustomer()
-- CID,CTEL,CNAME,POINT,AMOUNT,LNAME,FORLEVELUP
SELECT CID, CTEL, CNAME, POINT, AMOUNT, LNAME,
(SELECT HIGH-AMOUNT+1 FROM CUSTOMER WHERE CID=C.CID AND LNO!=5)forlevelup
FROM CUSTOMER C, CUS_LEVEL L
WHERE C.LNO=L.LNO;

-- 8. 회원가입 (입력) 고객전화,이름 입력시 회원가입 
--public int insertCustomer (String ctel, String cname)
-- 
-- ctel,cname
INSERT INTO CUSTOMER (CID,CTEL,CNAME)
    VALUES(CUS_SEQ.NEXTVAL,'010-6666-1111','아이유');
SELECT * FROM CUSTOMER;
DELETE FROM CUSTOMER WHERE CID=11;
COMMIT;

-- 9. 번호수정 - 고객이름을 중심으로 해당 고객의 전화번호를 수정 
-- public int updateCustomer (int cid,String ctel)
UPDATE CUSTOMER SET CTEL = '010-1234-1234' WHERE CID=4;
SELECT * FROM CUSTOMER;

-- 10. 회원탈퇴 - 고객전화, 이름을 입력한 정보를 바탕으로 DELETE 
-- int deleteCustomer (String ctel) 
DELETE FROM CUSTOMER WHERE CTEL LIKE '%'||'010-6666-6666';
DELETE FROM CUSTOMER WHERE CTEL = '010-6666-6666';
COMMIT;
SELECT * FROM CUSTOMER;




